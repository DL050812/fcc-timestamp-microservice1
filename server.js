 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

// We're handling Unix time or Natural time, eg:
// https://fcc-timestamp-microservice1.glitch.me/1450137600
// https://fcc-timestamp-microservice1.glitch.me/December%2015,%202015
app.get('/*', function (req, res) {
  var url = require('url');
  var q = url.parse(req.url, true);
  // Try to parseInt, if it works then it is Unix time, e.g:
  // https://fcc-timestamp-microservice1.glitch.me/1450137600
  var result = { "unix" : null, "natural" : null };
  var timestamp = Number.parseInt(q.pathname.toString().slice(1));
  if(Number.isInteger(timestamp)) {
      // * 1000 because Date expects it in milliseconds
      var time = new Date(timestamp * 1000);
      if ( isNaN( time.getTime() ) === false) 
          result = { "unix" : time.getTime()/1000, "natural" : getNaturalTime(time) };
  } else {
      // If not unix time, then eg: December%2015,%202015
     var stringtime = q.pathname.toString().slice(1);
     // Replace %20 with a space
     var cleanTime = stringtime.replace(/%20/g, ' ');
     var time = new Date(cleanTime);
     if ( isNaN( time.getTime() ) === false) 
         result = { "unix" : time.getTime()/1000, "natural" : getNaturalTime(time)};
  }
  
  //
  res.json(result)
})

// Takes a Date object and returns "natural time" string. eg "December 15, 2015"
function getNaturalTime(time) {
  var locale = "en-us",
  // Need to get long month name, eg December , not Dec
  month = time.toLocaleString(locale, { month: "long" });
  var day = time.getDate()
  var year = time.getFullYear()
  
  return `${month} ${day}, ${year}`
}
  
// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

